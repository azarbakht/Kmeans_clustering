clc;
clear all;
close all;
startTime=tic;

% data1 = csvread('data1.csv');
data2 = csvread('data2.csv');
data3 = csvread('data3.csv');

figure(1);
plot(data2(:,1),data2(:,2),'ob');
% figure(2);
% plot(data2(:,1),data2(:,2),'b');
% figure(3);
% plot(data3(:,1),data3(:,2),'b');

% number of clusters
% K = 5;

minK = 2;
maxK = 15;
numberOfRuns = 10;

minKwithinClusterSum = Inf(maxK,1);
run_K_WithinClusterSumDistance = [];


for K = minK:maxK,
    
    numberOfTrainingData = size(data2,1);
    numberOfFeatureDimensions = size(data2,2);
    
    for index=1:numberOfRuns,
        
        % initialize cluster centers
        
        %     randCenterIndices = randi([1 numberOfTrainingData], 1, K);
        randCenterIndices = randperm(numberOfTrainingData, K);
        
        
        clusterCenters = data2(randCenterIndices,:);
        
        data2Label = zeros(numberOfTrainingData, 1);
        data1DistanceFromClusterCenter = Inf(numberOfTrainingData, K);
        
        % Assign each data point to a cluster: label each data point with a cluster
        % number
        
        changeInLabelsFlag = 1;
        
        while changeInLabelsFlag == 1,
            
            changeInLabelsFlag = 0;
            
            for i = 1:numberOfTrainingData,
                for j = 1:K,
                    data1DistanceFromClusterCenter(i,j) = EuclideanDistance(data2(i,:),clusterCenters(j,:));
                end
                % check to see if any data point's label is updated
                [~, newLabel] = min(data1DistanceFromClusterCenter(i,:));
                if  data2Label(i) ~= newLabel,
                    changeInLabelsFlag = 1;
                end
                % update label maybe?
                [~, data2Label(i)] = min(data1DistanceFromClusterCenter(i,:));
                
            end
            
            
            % Re-estimate cluster centers
            
            Mu = Inf(K, numberOfFeatureDimensions);
            
            for i = 1:K,
                
                Mu(i,:) = mean(data2(find(data2Label == i),:));
                
                
                minDiff = EuclideanDistance(data2(1,:), Mu(i,:));
                
                for j = 2:numberOfTrainingData
                    if minDiff > EuclideanDistance(data2(j,:), Mu(i,:)),
                        minDiff = EuclideanDistance(data2(j,:), Mu(i,:));
                        closestDataPointToMuIndex = j;
                    end
                end
                
                %             clusterCenters(i,:) = data1(closestDataPointToMuIndex,:);
                clusterCenters(i,:) = Mu(i,:);
                % Part 1. b.
                
            end
            
        end
        
        
        hold on;
        plot(clusterCenters(:,1),clusterCenters(:,2),'oc');
        hold on;
        
        withinClusterSum = zeros(K, 1);
        
        % clustering done
        % calculate withing cluster sum of distances
        for i = 1:K,
            
            %      clusterI = zeros(size((data1(find(data1Label == i),:))));
            clusterI = data2(find(data2Label == i),:);
            for j = 1:size(clusterI,1),
                withinClusterSum(i) = withinClusterSum(i) + (EuclideanDistance(Mu(i,:), clusterI(j,:)))^2;
            end
            
        end
        
        if min(withinClusterSum) == 0
            test = 0;
        end
        
        MinMaxMeanSD(index, 1) = min(withinClusterSum);

%         MinMaxMeanSD(index, 2) = max(withinClusterSum);
%         MinMaxMeanSD(index, 3) = mean(withinClusterSum);
%         MinMaxMeanSD(index, 4) = std(withinClusterSum);
        
        
        minKwithinClusterSum(K,1) = min(min(withinClusterSum(withinClusterSum>0)));
        
        %         run_K_WithinClusterSumDistance = [run_K_WithinClusterSumDistance; withinClusterSum(index, 1:K)];
        
        %         MinMaxMeanSD(index, 1) = min(withinClusterSum(index));
        %         MinMaxMeanSD(index, 2) = max(withinClusterSum);
        %         MinMaxMeanSD(index, 3) = mean(withinClusterSum);
        %         MinMaxMeanSD(index, 4) = std(withinClusterSum);
        
        
        
    end % for # of runs index
    
    kMinMaxMeanSD(K, 1) = min(MinMaxMeanSD);
    
    
end % for K # of clusters index

% plotData = minKwithinClusterSum(2:end,1);


title({'K-Means clustering with K = 2:15, for 10 times'});
legend('Original Data Points', 'Cluster Centers');
xlabel('X');
ylabel('Y');

% save as PNG and EPS
% saveas(1, 'fig_Kmeans_with_random_initialization_K_2_15', 'epsc2');
% saveas(1, 'fig_Kmeans_with_random_initialization_K_2_15', 'png');
% saveas(1, 'fig_Kmeans_with_random_initialization_K_2_15', 'fig');
saveas(1, ['fig_' datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS') '_' 'fig_Kmeans_with_random_initialization_K_2_15'], 'epsc2');
saveas(1, ['fig_' datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS') '_' 'fig_Kmeans_with_random_initialization_K_2_15'], 'fig');
saveas(1, ['fig_' datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS') '_' 'fig_Kmeans_with_random_initialization_K_2_15'], 'png');

% % plot the metrics
figure(2);
hold on;
plot((2:1:maxK), kMinMaxMeanSD(2:1:maxK), 'b');
title({'Min Within-Cluster Sum of Squared Distances for K-Means clustering with K = 5, for 200 times'});
legend('Minimum Within-Cluster Sum of Squared Distances');
xlabel('# of runs');
ylabel('Within-Cluster Sum of Squared Distances');
 
saveas(2, ['fig_' datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS') '_' 'Within_cluster_sum_of_squared_distances__K_2_15'], 'epsc2');
saveas(2, ['fig_' datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS') '_' 'Within_cluster_sum_of_squared_distances__K_2_15'], 'fig');
saveas(2, ['fig_' datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS') '_' 'Within_cluster_sum_of_squared_distances__K_2_15'], 'png');


% save the environment variables
save ([datestr(date, 'YYYY-mm-dd') '_' datestr(now, 'HH-MM-SS')]);

runningTime = toc(startTime);
runningTime
